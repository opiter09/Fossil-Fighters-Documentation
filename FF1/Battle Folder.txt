EVERYTHING IS LITTLE-ENDIAN

FF1 contains a folder named "battle." Within this folder is a variety of small files, each given the
cryptic name of simply a number. However, I was able to ascertain that these files actually store the
definition for the teams of the various NPCs, and from there I have been working out many things about
the files. Also, to be clear, these files do need to be decompressed and recompressed, despite their
small size.

If you would just like to see all of that information, I have made a human-readable collection of it in the
form of the file "Battle Files Teams.txt." I have also included the python script I used to generate it,
namely ff1_teamsOutput.py. However, if you would like to actually edit that file, here is what I found:

0x0C-0x0D is the music used by the battle. Presumably, this correlates to IDs in etc/snd_data.sdat or
something. The list of songs used by fights is as follows (courtesy of EchoSpaceZ):
- 6B 00: Tutorial
- 6C 00: Captain Travers
- 6D 00: Level-Up (Preliminary)
- 6E 00: Level-Up (Master)
- 6F 00: Normal Enemies
- 70 00: Bosses
- 71 00: Guhnash
- 17 05: Bullwort
- 18 05: Dynal
Do note, however, that other values do work and can be used to play non-battle music.

0x30 is the value for which 3D arena model the battle is fought in. The list for them is as follows
(also courtesy of EchoSpaceZ):
- 00: Unused Temple
- 01: Level-Up Arena
- 02: Guhnash 
- 03: Hotel/Outside
- 04: Greenhorn/Knotwood
- 05: BB Base/Digadigamid
- 06: Rivet Ravine
- 07: Bottomsup Bay
- 08: Mt. Lavaflow
- 09: Starship
- 0A: Secret Island
- 0B: Parchment Desert
- 0C: Coldfeet Glacier
- 0D: Pirate Ship
- 0E: Mine Tunnels

0x54-0x57 represent the BP you get for winning the fight (as, per usual, a 4-byte little-endian integer).
If this value is FF FF FF FF, e.g. for Captain Travers, you will get no BP at all at the end.

0x64-0x67 is the name of the fighter in question. This value corresponds to a certain chunk in
text/japanese; if you split it apart with my editor, you can simply look for the file whose name begins
with this number in textFiles.

0x68-0x6B is the fighter rank of this enemy. You can go check etc/btl_kp_defs to see how much FP this rank gets.
If you set the rank above 9 (the highest that file goes to), the enemy will get 999 FP each turn.

0x8C-0x8F is the fighter's icon. This corresponds to the sprites in a somewhat weird way, but basically if you
drag the motion folder onto FFTool, then go into the folder motion/battle_character/bin/r_character.bin/, the
relevant icon will be X_0.png, where X is this value plus 90.

0x90-0x93 is the minimum health each vivosaur in the fight can get to. This is used exactly once, in the OP
Frigi fight, to ensure that its health cannot drop below 1.

The vivosaurs start at 0x94. We get four bytes of ID, then four bytes of Level, and then four bytes that are
always 00 00 00 00. If there are less than three vivosaurs on the team, their bytes simply do not exist, and
we skip on to the next bit.

After the vivosaur/level data are four bytes per vivosaur which are confirmed to be the AI Set used. Due to
how high the Guhnash values are, these must be in the btl_aiset folder, not btl_ai. Rather, it appears that
each btl_aiset file in turn calls various btl_ai files at various times, as little snippets of code or
something.

Next, there are 4 bytes per vivo which appear to control inter-level battle points. This exists because in
FF1, vivos gain LP as they gain BP in between levels. However, the values are *extremely* weird, so here
is a table for them (also courtesy of EchoSpaceZ):
- 00 00: 0
- 9A 01: 9
- CD 04: 18
- 00 08: 27
- 33 0B: 36
- CD 0C: 41
- 00 10: 50
Note that only the first two bytes are shown here, since the last two are always 00 00.

Finally, we get to the number of moves. These are, again, four per vivosaur on the team. You know you're here
when you get one to three four-byte integers in a row that are between 1 and 4.

After that, we get eight useless bytes, which are the always same four bytes repeated twice for some reason.


This is all well and good if you just want to change a vivosaur, but what if you want to add or remove the
total number of them? Well, that involves an entire process:
- Change the number of vivosaurs values at 0x5C, 0x6C, 0x74, and 0x7C
- Change the unknown values at 0x70, 0x78, 0x80, and 0x88 to the right ones for how many vivosaurs you
want:
	- One: 44, 48, 4C, 50
	- Two: 50, 58, 60, 68
	- Three: 5C, 68, 74, 80
- Add or remove data where it needs to be, as described above. The only advice I can give regarding
the unknown values is that making one vivo have 00 08 00 00 and the others all 00's or
vice versa will make that one always start in the AZ. Honestly though, all 00's should always
work fine
- Change the values at 0x38 and 0x40 to match the new file size


Of course, Fossil Fighters hates me and there are always a few random files with extra stuff at the beginning.
For the Battle folder, you can tell by if 0x04 is not 0. In this case, we must shift in the following ways:
- Nothing changes for the arena
- The BP moves from 0x54 to (0x54 + [value at 0x04])
- For everything else, add ([value at 0x08] - 0x5C) to the above locations
- However, do note that the file size values are still in the same spot even with the weird data

But, to make this worse, some of them have weird data at the *end*! In this case, 0x38 is not the file size,
but rather where the extra data at the end begins. There are also like five fights where both size values
are too small and 0x3C is [extra data / 4], in which case the extra data represents the vivosaurs you are
required to have on your team. Thus, if you add/remove vivos, make sure to change 0x38 by the same amount
you changed 0x40.
