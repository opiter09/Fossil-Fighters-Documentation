EVERYTHING IS LITTLE-ENDIAN

FFC's Battle_Param folder is the equivalent of FF1's Battle folder: it holds data for each enemy team
in the game. The format is also pretty similar, although in my opinion much easier to work with.

0x12 represents the music that plays during the fight. The values used by fights (along with 0x3C and
0x3D, to fill the gap) are as follows (courtesy of EchoSpaceZ):
- 32: Tutorial
- 33: Cup Battles
- 34: Cup Final (Rupert)
- 35: Normal Enemies
- 36: Bosses
- 37: BareBones Brigade
- 38: Don Boneyard
- 39: Pauleen and 2nd Todd
- 3A: Zongazonga (First)
- 3B: Zongazonga (Second)
- 3C: Unused Theme
- 3D: Super Revival
- 3E: Dynal
Do note, however, that other values do work and can be used to play non-battle music.

0x14 is a value that is not well-understood, but it goes with the music somehow. This value should be
set to 0x26 for all of the above except for Don Boneyard (where it should be 0x2B), Pauleen and 2nd Todd
(where it should be 0x2C), and the two Zongazonga themes (where it should be 0x2D).

The very first thing of note is the amount of BP won, from 0x30 to 0x31. Like in FF1, if this value
is FF FF, you get nothing.

The size of the file is at 0x40. Unlike FF1, it only appears once.

Next we have the fighter name at 0x46. You have to take that value and subtract 0x4D, then
match it to a file in enemyNameFiles (the folder from splitting text_battle_enemy_name).

Right after it, at 0x48, is the enemy's fighter rank. You can go check etc/btl_kp_defs to get the
FP values for that rank.

0x4C is what formation the team is in. 00 means that it is in the Cambrian (<) formation, while
01 means that it is in the Jurassic (>) formation.

Vivosaur data starts at 0x70, and is always 12 bytes long per vivo. We have two bytes
of ID, then four of rank, then two of Super Fossil fossil ID (based on kaseki_defs), then
four of Super Fossil cleaning points. If there are less than three vivosaurs, then their data will
simply not exist, and we move on.

After the vivosaur data is four bytes per vivo which I know nothing about. Thankfully, unlike FF1 these
always seem to be the same as each other, so you should be able to just add more of them and be fine.

After that, there are two bytes per vivo which are the number of fossils they have (not that you can see
them, but still). Because FFC, if the number of fossils a vivosaur have does not match the number of moves,
it will show as being level 0 on the Formation screen (but work completely fine in battle).

Finally, the last six bytes (or sometimes four, without the 00 00 after the fossil numbers) are entirely
unknown. Don't even look at them, honestly.


Now we come to the fun part, all the things you have to change to add (or remove) a vivosaur:
- Change the number of vivos values at 0x50, 0x58, and 0x60
- Change the unknown values at 0x54, 0x5C, 0x64, and 0x6C to the right ones for how many vivosaurs you want:
	- One: 2C, 38, 3C, 40
	- Two: 2C, 44, 4C, 50
	- Three: 2C, 50, 5C, 64
- Add or remove data where it needs to be, as described above
- Finally, change 0x40 to match the new file size


However! All of this is complicated by weird files with extra data in them. The classic example is the
first four param files, which represent the Allosaurus fight with each different starter. In these
cases, we can take advantage of the fact that 0x38 is a pointer to 2 bytes before where the name is.
For example, in normal files, you have a 0x44 there, and thus the name value is at 0x46. From here,
everything proceeds as normal (but later). If you want to add or a remove a vivo, the new unknown values
listed above may need to be augmented: the 2C stays the same, but if the other ones are shifted by some
amount, make sure to retain that shift.